AWSTemplateFormatVersion: '2010-09-09'
Description: Enterprise API Gateway with logging and monitoring

Parameters:
  APIName:
    Type: String
    Default: EnterpriseAPI
    Description: Name of the API Gateway
  StageName:
    Type: String
    Default: prod
    Description: Deployment stage name

Resources:
  # API Gateway REST API
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref APIName
      Description: Enterprise API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - '*/*'

  # Example Resource and Method
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: example

  # IAM Role for API Gateway to write to CloudWatch
  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: APIGatewayCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"

  # API Gateway Account Settings
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn
    DependsOn:
      - APIGatewayCloudWatchRole

  # Lambda Integration
  ExampleLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          def handler(event, context):
              name = event.get('queryStringParameters', {}).get('name', 'Stranger')
              return {
                  'statusCode': 200,
                  'body': f"Hello, {name}! Welcome to our API",
                  'headers': {'Content-Type': 'text/plain'}
              }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt ExampleLambda.Arn
      MethodResponses:
        - StatusCode: 200

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ExampleLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/example"

  # Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiMethod
      - ApiGatewayAccount
    Properties:
      RestApiId: !Ref RestApi

  # Stage Configuration with Logging
  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: 
      - ApiGatewayAccount
      - ApiDeployment
    Properties:
      StageName: !Ref StageName
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
          LoggingLevel: INFO
          DataTraceEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogsLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  # CloudWatch Log Groups
  ExecutionLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "API-Gateway-Execution-Logs_${RestApi}/${StageName}"
      RetentionInDays: 365

  AccessLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "API-Gateway-Access-Logs_${RestApi}/${StageName}"
      RetentionInDays: 365

  # CloudWatch Alarms
  Api5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "API Gateway 5xx errors"
      Namespace: AWS/ApiGateway
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref APIName
        - Name: Stage
          Value: !Ref StageName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  ApiLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "API Gateway high latency"
      Namespace: AWS/ApiGateway
      MetricName: Latency
      Dimensions:
        - Name: ApiName
          Value: !Ref APIName
        - Name: Stage
          Value: !Ref StageName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 1000
      ComparisonOperator: GreaterThanThreshold

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"